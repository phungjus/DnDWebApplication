{"ast":null,"code":"var _jsxFileName = \"/Users/ko/Developer/CSC309Project/team13/phase1/src/Components/Diceroller/index.js\";\nimport React from 'react';\nimport './styles.css';\nimport Dice from '../Dice/index.js';\nimport Dicelog from '../Dicelog/index.js';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nconst useStyles = makeStyles({\n  list: {\n    width: 250\n  },\n  fullList: {\n    width: 'auto'\n  }\n});\nexport default function TemporaryDrawer() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false\n  });\n\n  const toggleDrawer = (anchor, open) => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    setState({ ...state,\n      [anchor]: open\n    });\n  };\n\n  const list = anchor => /*#__PURE__*/React.createElement(\"div\", {\n    className: clsx(classes.list, {\n      [classes.fullList]: anchor === 'top' || anchor === 'bottom'\n    }),\n    role: \"presentation\",\n    onClick: toggleDrawer(anchor, false),\n    onKeyDown: toggleDrawer(anchor, false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, ['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => /*#__PURE__*/React.createElement(ListItem, {\n    button: true,\n    key: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, index % 2 === 0 ? /*#__PURE__*/React.createElement(InboxIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 46\n    }\n  }) : /*#__PURE__*/React.createElement(MailIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 62\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, ['All mail', 'Trash', 'Spam'].map((text, index) => /*#__PURE__*/React.createElement(ListItem, {\n    button: true,\n    key: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ListItemIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, index % 2 === 0 ? /*#__PURE__*/React.createElement(InboxIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 46\n    }\n  }) : /*#__PURE__*/React.createElement(MailIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 62\n    }\n  })), /*#__PURE__*/React.createElement(ListItemText, {\n    primary: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  })))));\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, ['left', 'right', 'top', 'bottom'].map(anchor => /*#__PURE__*/React.createElement(React.Fragment, {\n    key: anchor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: toggleDrawer(anchor, true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, anchor), /*#__PURE__*/React.createElement(Drawer, {\n    anchor: anchor,\n    open: state[anchor],\n    onClose: toggleDrawer(anchor, false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, list(anchor)))));\n} // class Diceroller extends React.Component {\n//   state = {\n//     d20: 0,\n//     d12: 0,\n//     d10: 0,\n//     d8: 0,\n//     d6: 0,\n//     d4: 0,\n//     clickedDice: false,\n//     rolled : false,\n//     rollResult : []\n//   }\n//   handleDicePress = (event) => {\n//     const diceType = event.target.className;\n//     const previouslyClicked = this.state.clickedDice;\n//     if (!previouslyClicked) {\n//       this.setState({\n//         [diceType] : 1,\n//         clickedDice: true,\n//         rolled: false,\n//         rollResult : []\n//       });\n//     } else if (previouslyClicked && this.state[diceType] !== 0) {\n//       const newValue = this.state[diceType] + 1;\n//       this.setState({\n//         [diceType] : newValue\n//       });\n//     } else {\n//       this.setState({\n//         d20: 0,\n//         d12: 0,\n//         d10: 0,\n//         d8: 0,\n//         d6: 0,\n//         d4: 0\n//       });\n//       this.setState({\n//         [diceType] : 1\n//       });\n//     }\n//   }\n//   rolling = () => {\n//     const die = [\"d20\", \"d12\", \"d10\", \"d8\", \"d6\", \"d4\"]\n//     var dice\n//     for (dice of die) {\n//       if (this.state[dice] !== 0) {\n//         return { numberOfRolls : this.state[dice], diceToRoll : dice }\n//       }\n//     }\n//     return { numberOfRolls : undefined, diceToRoll: undefined }\n//   }\n//   rollResult = () => {\n//     const { numberOfRolls, diceToRoll } = this.rolling();\n//     if (numberOfRolls === undefined) {\n//       return []\n//     } else {\n//       var results = []\n//       var i = 0;\n//       while (i < numberOfRolls) {\n//         results.push(Math.floor(Math.random() * parseInt(diceToRoll.slice(1))) + 1)\n//         i = i + 1;\n//       }\n//       return results\n//     }\n//   }\n//   rollResultText = () => {\n//     var result;\n//     var output = '';\n//     if (this.state.rollResult === []) {\n//       return \"Please select a dice to roll\"\n//     } else {\n//       this.state.rollResult.forEach( result => output = output.concat('You rolled a ' + result + '!\\n'))\n//       return output\n//     }\n//   }\n//   handleRoll = () => {\n//     const rollResult = this.rollResult();\n//     this.setState({\n//       rolled: true,\n//       d20: 0,\n//       d12: 0,\n//       d10: 0,\n//       d8: 0,\n//       d6: 0,\n//       d4: 0,\n//       clickedDice: false,\n//       rollResult : rollResult\n//     });\n//   }\n//   outputText = () => {\n//     if(!this.state.rolled) {\n//       const { numberOfRolls, diceToRoll } = this.rolling();\n//       if (numberOfRolls !== undefined){\n//         return `Rolling ${numberOfRolls} ${diceToRoll} dice.`\n//       } else {\n//         return \"Please select a dice to roll\"\n//       }\n//     } else {\n//       return this.rollResultText();\n//     }\n//   }\n//   render() {\n//     return (\n//       <div className=\"Diceroller\">\n//         <div className=\"container\">\n//           <Dice\n//             gridClass=\"d20\"\n//             onClick={this.handleDicePress}\n//           />\n//           <Dice\n//             gridClass=\"d12\"\n//             onClick={this.handleDicePress}\n//           />\n//           <Dice\n//             gridClass=\"d10\"\n//             onClick={this.handleDicePress}\n//           />\n//           <Dice\n//             gridClass=\"d8\"\n//             onClick={this.handleDicePress}\n//           />\n//           <Dice\n//             gridClass=\"d6\"\n//             onClick={this.handleDicePress}\n//           />\n//           <Dice\n//             gridClass=\"d4\"\n//             onClick={this.handleDicePress}\n//           />\n//           <button className=\"roll\" onClick={this.handleRoll}>\n//               ROLL\n//           </button>\n//           <Dicelog\n//             outputText={this.outputText()}\n//           />\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n// export default Diceroller;","map":{"version":3,"sources":["/Users/ko/Developer/CSC309Project/team13/phase1/src/Components/Diceroller/index.js"],"names":["React","Dice","Dicelog","clsx","makeStyles","Drawer","Button","List","Divider","ListItem","ListItemIcon","ListItemText","InboxIcon","MailIcon","useStyles","list","width","fullList","TemporaryDrawer","classes","state","setState","useState","top","left","bottom","right","toggleDrawer","anchor","open","event","type","key","map","text","index"],"mappings":"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AA;AAAA;AAAA,IAAlB,gBAAkC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjD,CADF,eAEE,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAED,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADD,CADH,CAjBF,CADF;;AA6BA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC,MAAD,EAAS,OAAT,EAAkB,KAAlB,EAAyB,QAAzB,EAAmCD,GAAnC,CAAwCL,MAAD,iBACtC,oBAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,GAAG,EAAEA,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAED,YAAY,CAACC,MAAD,EAAS,IAAT,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8CA,MAA9C,CADF,eAEE,oBAAC,MAAD;AAAQ,IAAA,MAAM,EAAEA,MAAhB;AAAwB,IAAA,IAAI,EAAER,KAAK,CAACQ,MAAD,CAAnC;AAA6C,IAAA,OAAO,EAAED,YAAY,CAACC,MAAD,EAAS,KAAT,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,IAAI,CAACa,MAAD,CADP,CAFF,CADD,CADH,CADF;AAYD,C,CAED;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React from 'react';\nimport './styles.css';\nimport Dice from '../Dice/index.js';\nimport Dicelog from '../Dicelog/index.js';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\n\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n});\n\nexport default function TemporaryDrawer() {\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n\n  const toggleDrawer = (anchor, open) => (event) => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    setState({ ...state, [anchor]: open });\n  };\n\n  const list = (anchor) => (\n    <div\n      className={clsx(classes.list, {\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n      })}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    >\n      <List>\n        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      <List>\n        {['All mail', 'Trash', 'Spam'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n\n  return (\n    <div>\n      {['left', 'right', 'top', 'bottom'].map((anchor) => (\n        <React.Fragment key={anchor}>\n          <Button onClick={toggleDrawer(anchor, true)}>{anchor}</Button>\n          <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\n            {list(anchor)}\n          </Drawer>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n}\n\n// class Diceroller extends React.Component {\n  \n//   state = {\n//     d20: 0,\n//     d12: 0,\n//     d10: 0,\n//     d8: 0,\n//     d6: 0,\n//     d4: 0,\n//     clickedDice: false,\n//     rolled : false,\n//     rollResult : []\n//   }\n\n//   handleDicePress = (event) => {\n//     const diceType = event.target.className;\n//     const previouslyClicked = this.state.clickedDice;\n\n//     if (!previouslyClicked) {\n//       this.setState({\n//         [diceType] : 1,\n//         clickedDice: true,\n//         rolled: false,\n//         rollResult : []\n//       });\n//     } else if (previouslyClicked && this.state[diceType] !== 0) {\n//       const newValue = this.state[diceType] + 1;\n//       this.setState({\n//         [diceType] : newValue\n//       });\n//     } else {\n//       this.setState({\n//         d20: 0,\n//         d12: 0,\n//         d10: 0,\n//         d8: 0,\n//         d6: 0,\n//         d4: 0\n//       });\n//       this.setState({\n//         [diceType] : 1\n//       });\n//     }\n//   }\n\n//   rolling = () => {\n//     const die = [\"d20\", \"d12\", \"d10\", \"d8\", \"d6\", \"d4\"]\n//     var dice\n//     for (dice of die) {\n//       if (this.state[dice] !== 0) {\n//         return { numberOfRolls : this.state[dice], diceToRoll : dice }\n//       }\n//     }\n//     return { numberOfRolls : undefined, diceToRoll: undefined }\n//   }\n\n//   rollResult = () => {\n//     const { numberOfRolls, diceToRoll } = this.rolling();\n//     if (numberOfRolls === undefined) {\n//       return []\n//     } else {\n//       var results = []\n//       var i = 0;\n//       while (i < numberOfRolls) {\n//         results.push(Math.floor(Math.random() * parseInt(diceToRoll.slice(1))) + 1)\n//         i = i + 1;\n//       }\n//       return results\n//     }\n//   }\n\n//   rollResultText = () => {\n//     var result;\n//     var output = '';\n//     if (this.state.rollResult === []) {\n//       return \"Please select a dice to roll\"\n//     } else {\n//       this.state.rollResult.forEach( result => output = output.concat('You rolled a ' + result + '!\\n'))\n//       return output\n//     }\n//   }\n\n//   handleRoll = () => {\n//     const rollResult = this.rollResult();\n//     this.setState({\n//       rolled: true,\n//       d20: 0,\n//       d12: 0,\n//       d10: 0,\n//       d8: 0,\n//       d6: 0,\n//       d4: 0,\n//       clickedDice: false,\n//       rollResult : rollResult\n//     });\n//   }\n\n//   outputText = () => {\n//     if(!this.state.rolled) {\n//       const { numberOfRolls, diceToRoll } = this.rolling();\n//       if (numberOfRolls !== undefined){\n//         return `Rolling ${numberOfRolls} ${diceToRoll} dice.`\n//       } else {\n//         return \"Please select a dice to roll\"\n//       }\n//     } else {\n//       return this.rollResultText();\n//     }\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"Diceroller\">\n//         <div className=\"container\">\n//           <Dice\n//             gridClass=\"d20\"\n//             onClick={this.handleDicePress}\n//           />\n//           <Dice\n//             gridClass=\"d12\"\n//             onClick={this.handleDicePress}\n//           />\n//           <Dice\n//             gridClass=\"d10\"\n//             onClick={this.handleDicePress}\n//           />\n//           <Dice\n//             gridClass=\"d8\"\n//             onClick={this.handleDicePress}\n//           />\n//           <Dice\n//             gridClass=\"d6\"\n//             onClick={this.handleDicePress}\n//           />\n//           <Dice\n//             gridClass=\"d4\"\n//             onClick={this.handleDicePress}\n//           />\n//           <button className=\"roll\" onClick={this.handleRoll}>\n//               ROLL\n//           </button>\n//           <Dicelog\n//             outputText={this.outputText()}\n//           />\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default Diceroller;"]},"metadata":{},"sourceType":"module"}