{"ast":null,"code":"var _jsxFileName = \"/Users/ko/Developer/CSC309Project/team13/phase1/src/Components/Diceroller/index.js\";\nimport React from 'react';\nimport './styles.css';\nimport Dice from '../Dice/index.js';\nimport Dicelog from '../Dicelog/index.js';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail'; // const useStyles = makeStyles({\n//   list: {\n//     width: 250,\n//   },\n//   fullList: {\n//     width: 'auto',\n//   },\n// });\n// export default function TemporaryDrawer() {\n//   const classes = useStyles();\n//   const [state, setState] = React.useState({\n//     right: false\n//   });\n//   const toggleDrawer = (anchor, open) => (event) => {\n//     if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n//       return;\n//     }\n//     setState({ ...state, [anchor]: open });\n//   };\n//   const list = (anchor) => (\n//     <div\n//       className={clsx(classes.list, {\n//         [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n//       })}\n//       role=\"presentation\"\n//       onClick={toggleDrawer(anchor, false)}\n//       onKeyDown={toggleDrawer(anchor, false)}\n//     >\n//       <List>\n//         {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n//           <ListItem button key={text}>\n//             <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n//             <ListItemText primary={text} />\n//           </ListItem>\n//         ))}\n//       </List>\n//       <Divider />\n//       <List>\n//         {['All mail', 'Trash', 'Spam'].map((text, index) => (\n//           <ListItem button key={text}>\n//             <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n//             <ListItemText primary={text} />\n//           </ListItem>\n//         ))}\n//       </List>\n//     </div>\n//   );\n//   return (\n//     <div>\n//         <React.Fragment key={'right'}>\n//           <Button onClick={toggleDrawer('right', true)}>{'right'}</Button>\n//           <Drawer anchor={'right'} open={state['right']} onClose={toggleDrawer('right', false)}>\n//             {list('right')}\n//           </Drawer>\n//         </React.Fragment>\n//     </div>\n//   );\n// }\n\nclass Diceroller extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      d20: 0,\n      d12: 0,\n      d10: 0,\n      d8: 0,\n      d6: 0,\n      d4: 0,\n      clickedDice: false,\n      rolled: false,\n      rollResult: [],\n      anchor: false\n    };\n\n    this.handleDicePress = event => {\n      const diceType = event.target.className;\n      const previouslyClicked = this.state.clickedDice;\n\n      if (!previouslyClicked) {\n        this.setState({\n          [diceType]: 1,\n          clickedDice: true,\n          rolled: false,\n          rollResult: []\n        });\n      } else if (previouslyClicked && this.state[diceType] !== 0) {\n        const newValue = this.state[diceType] + 1;\n        this.setState({\n          [diceType]: newValue\n        });\n      } else {\n        this.setState({\n          d20: 0,\n          d12: 0,\n          d10: 0,\n          d8: 0,\n          d6: 0,\n          d4: 0\n        });\n        this.setState({\n          [diceType]: 1\n        });\n      }\n    };\n\n    this.rolling = () => {\n      const die = [\"d20\", \"d12\", \"d10\", \"d8\", \"d6\", \"d4\"];\n      var dice;\n\n      for (dice of die) {\n        if (this.state[dice] !== 0) {\n          return {\n            numberOfRolls: this.state[dice],\n            diceToRoll: dice\n          };\n        }\n      }\n\n      return {\n        numberOfRolls: undefined,\n        diceToRoll: undefined\n      };\n    };\n\n    this.rollResult = () => {\n      const {\n        numberOfRolls,\n        diceToRoll\n      } = this.rolling();\n\n      if (numberOfRolls === undefined) {\n        return [];\n      } else {\n        var results = [];\n        var i = 0;\n\n        while (i < numberOfRolls) {\n          results.push(Math.floor(Math.random() * parseInt(diceToRoll.slice(1))) + 1);\n          i = i + 1;\n        }\n\n        return results;\n      }\n    };\n\n    this.rollResultText = () => {\n      var result;\n      var output = '';\n\n      if (this.state.rollResult === []) {\n        return \"Please select a dice to roll\";\n      } else {\n        this.state.rollResult.forEach(result => output = output.concat('You rolled a ' + result + '!\\n'));\n        return output;\n      }\n    };\n\n    this.handleRoll = () => {\n      const rollResult = this.rollResult();\n      this.setState({\n        rolled: true,\n        d20: 0,\n        d12: 0,\n        d10: 0,\n        d8: 0,\n        d6: 0,\n        d4: 0,\n        clickedDice: false,\n        rollResult: rollResult\n      });\n    };\n\n    this.outputText = () => {\n      if (!this.state.rolled) {\n        const {\n          numberOfRolls,\n          diceToRoll\n        } = this.rolling();\n\n        if (numberOfRolls !== undefined) {\n          return `Rolling ${numberOfRolls} ${diceToRoll} dice.`;\n        } else {\n          return \"Please select a dice to roll\";\n        }\n      } else {\n        return this.rollResultText();\n      }\n    };\n\n    this.toggleDrawer = bool => {\n      this.setState({\n        anchor: bool\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Drawer // anchor={this.state.anchor}\n    // open={this.state.anchor}\n    , {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Diceroller\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Dice, {\n      gridClass: \"d20\",\n      onClick: this.handleDicePress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Dice, {\n      gridClass: \"d12\",\n      onClick: this.handleDicePress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Dice, {\n      gridClass: \"d10\",\n      onClick: this.handleDicePress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Dice, {\n      gridClass: \"d8\",\n      onClick: this.handleDicePress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Dice, {\n      gridClass: \"d6\",\n      onClick: this.handleDicePress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Dice, {\n      gridClass: \"d4\",\n      onClick: this.handleDicePress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"roll\",\n      onClick: this.handleRoll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }\n    }, \"ROLL\"), /*#__PURE__*/React.createElement(Dicelog, {\n      outputText: this.outputText(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default Diceroller;","map":{"version":3,"sources":["/Users/ko/Developer/CSC309Project/team13/phase1/src/Components/Diceroller/index.js"],"names":["React","Dice","Dicelog","clsx","makeStyles","Drawer","Button","List","Divider","ListItem","ListItemIcon","ListItemText","InboxIcon","MailIcon","Diceroller","Component","state","d20","d12","d10","d8","d6","d4","clickedDice","rolled","rollResult","anchor","handleDicePress","event","diceType","target","className","previouslyClicked","setState","newValue","rolling","die","dice","numberOfRolls","diceToRoll","undefined","results","i","push","Math","floor","random","parseInt","slice","rollResultText","result","output","forEach","concat","handleRoll","outputText","toggleDrawer","bool","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './styles.css';\nimport Dice from '../Dice/index.js';\nimport Dicelog from '../Dicelog/index.js';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\n\n// const useStyles = makeStyles({\n//   list: {\n//     width: 250,\n//   },\n//   fullList: {\n//     width: 'auto',\n//   },\n// });\n\n// export default function TemporaryDrawer() {\n//   const classes = useStyles();\n//   const [state, setState] = React.useState({\n//     right: false\n//   });\n\n//   const toggleDrawer = (anchor, open) => (event) => {\n//     if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n//       return;\n//     }\n\n//     setState({ ...state, [anchor]: open });\n//   };\n\n//   const list = (anchor) => (\n//     <div\n//       className={clsx(classes.list, {\n//         [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n//       })}\n//       role=\"presentation\"\n//       onClick={toggleDrawer(anchor, false)}\n//       onKeyDown={toggleDrawer(anchor, false)}\n//     >\n//       <List>\n//         {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n//           <ListItem button key={text}>\n//             <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n//             <ListItemText primary={text} />\n//           </ListItem>\n//         ))}\n//       </List>\n//       <Divider />\n//       <List>\n//         {['All mail', 'Trash', 'Spam'].map((text, index) => (\n//           <ListItem button key={text}>\n//             <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n//             <ListItemText primary={text} />\n//           </ListItem>\n//         ))}\n//       </List>\n//     </div>\n//   );\n\n//   return (\n//     <div>\n//         <React.Fragment key={'right'}>\n//           <Button onClick={toggleDrawer('right', true)}>{'right'}</Button>\n//           <Drawer anchor={'right'} open={state['right']} onClose={toggleDrawer('right', false)}>\n//             {list('right')}\n//           </Drawer>\n//         </React.Fragment>\n//     </div>\n//   );\n// }\n\nclass Diceroller extends React.Component {\n  \n  state = {\n    d20: 0,\n    d12: 0,\n    d10: 0,\n    d8: 0,\n    d6: 0,\n    d4: 0,\n    clickedDice: false,\n    rolled : false,\n    rollResult : [],\n    anchor: false\n  }\n\n  handleDicePress = (event) => {\n    const diceType = event.target.className;\n    const previouslyClicked = this.state.clickedDice;\n\n    if (!previouslyClicked) {\n      this.setState({\n        [diceType] : 1,\n        clickedDice: true,\n        rolled: false,\n        rollResult : []\n      });\n    } else if (previouslyClicked && this.state[diceType] !== 0) {\n      const newValue = this.state[diceType] + 1;\n      this.setState({\n        [diceType] : newValue\n      });\n    } else {\n      this.setState({\n        d20: 0,\n        d12: 0,\n        d10: 0,\n        d8: 0,\n        d6: 0,\n        d4: 0\n      });\n      this.setState({\n        [diceType] : 1\n      });\n    }\n  }\n\n  rolling = () => {\n    const die = [\"d20\", \"d12\", \"d10\", \"d8\", \"d6\", \"d4\"]\n    var dice\n    for (dice of die) {\n      if (this.state[dice] !== 0) {\n        return { numberOfRolls : this.state[dice], diceToRoll : dice }\n      }\n    }\n    return { numberOfRolls : undefined, diceToRoll: undefined }\n  }\n\n  rollResult = () => {\n    const { numberOfRolls, diceToRoll } = this.rolling();\n    if (numberOfRolls === undefined) {\n      return []\n    } else {\n      var results = []\n      var i = 0;\n      while (i < numberOfRolls) {\n        results.push(Math.floor(Math.random() * parseInt(diceToRoll.slice(1))) + 1)\n        i = i + 1;\n      }\n      return results\n    }\n  }\n\n  rollResultText = () => {\n    var result;\n    var output = '';\n    if (this.state.rollResult === []) {\n      return \"Please select a dice to roll\"\n    } else {\n      this.state.rollResult.forEach( result => output = output.concat('You rolled a ' + result + '!\\n'))\n      return output\n    }\n  }\n\n  handleRoll = () => {\n    const rollResult = this.rollResult();\n    this.setState({\n      rolled: true,\n      d20: 0,\n      d12: 0,\n      d10: 0,\n      d8: 0,\n      d6: 0,\n      d4: 0,\n      clickedDice: false,\n      rollResult : rollResult\n    });\n  }\n\n  outputText = () => {\n    if(!this.state.rolled) {\n      const { numberOfRolls, diceToRoll } = this.rolling();\n      if (numberOfRolls !== undefined){\n        return `Rolling ${numberOfRolls} ${diceToRoll} dice.`\n      } else {\n        return \"Please select a dice to roll\"\n      }\n    } else {\n      return this.rollResultText();\n    }\n  }\n\n  toggleDrawer = (bool) => {\n    this.setState({\n      anchor: bool\n    })\n  }\n\n  render() {\n    return (\n      <Drawer\n        // anchor={this.state.anchor}\n        // open={this.state.anchor}\n      >\n        <div className=\"Diceroller\">\n          <div className=\"container\">\n            <Dice\n              gridClass=\"d20\"\n              onClick={this.handleDicePress}\n            />\n            <Dice\n              gridClass=\"d12\"\n              onClick={this.handleDicePress}\n            />\n            <Dice\n              gridClass=\"d10\"\n              onClick={this.handleDicePress}\n            />\n            <Dice\n              gridClass=\"d8\"\n              onClick={this.handleDicePress}\n            />\n            <Dice\n              gridClass=\"d6\"\n              onClick={this.handleDicePress}\n            />\n            <Dice\n              gridClass=\"d4\"\n              onClick={this.handleDicePress}\n            />\n            <button className=\"roll\" onClick={this.handleRoll}>\n                ROLL\n            </button>\n            <Dicelog\n              outputText={this.outputText()}\n            />\n          </div>\n        </div>\n      </Drawer>\n    );\n  }\n}\n\nexport default Diceroller;"]},"metadata":{},"sourceType":"module"}